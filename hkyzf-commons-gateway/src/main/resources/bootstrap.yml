# 应用端口
server:
  port: 9527

# 配置的优先级
# A: 通过 spring.cloud.nacos.config.shared-dataids 支持多个共享 Data Id 的配置
# B: 通过 spring.cloud.nacos.config.ext-config[n].data-id 的方式支持多个扩展 Data Id 的配置
# C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置
# 当三种方式共同使用时，他们的一个优先级关系是:A < B < C

spring:
  # 当通过配置文件来指定时必须放在 bootstrap.properties 文件中。
  # Nacos Config 在加载配置的时候，不仅仅加载了以 DataId 为 ${spring.application.name}.${file-extension:properties} 为前缀的基础配置
  # 还加载了 DataId 为 ${spring.application.name}-${profile}.${file-extension:properties} 的基础配置。
  # 在日常开发中如果遇到多套环境下的不同配置，可以通过 Spring 提供的 ${spring.profiles.active} 这个配置项来配置。
  # 通常的做法是通过 -Dspring.profiles.active=<profile> 参数指定其配置来达到环境间灵活的切换。
  profiles:
    active: dev
  application:
    # 应用名称
    name: cloud-gateway
  cloud:
    nacos:
      # Nacos 服务注册与发现地址。
      discovery:
        # Nacos 注册中心开关
        enabled: true
        server-addr: 127.0.0.1:8848
      # Nacos 配置中心地址
      config:
        # Nacos 配置中心开关
        enabled: true
        server-addr: 127.0.0.1:8848
        # DataId 默认使用 spring.application.name 配置跟文件扩展名结合, GROUP 不配置默认使用 DEFAULT_GROUP。
        # 因此该配置文件对应的 Nacos Config 配置的 DataId 为 consumer-member.properties, GROUP 为 DEFAULT_GROUP
        # 默认格式为 properties，所以这里加载的配置 DataId 为 consumer-member.yaml。
        file-extension: yaml
        # 该配置必须放在 bootstrap.properties 文件中。
        # Namespace 用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。
        # Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。
        # 在没有明确指定 ${spring.cloud.nacos.config.namespace} 配置的情况下，默认使用的是 Nacos 上 Public 这个 namespace。
        # 此外 spring.cloud.nacos.config.namespace 的值是 namespace 对应的 id，id 值可以在 Nacos 的控制台获取。
        # namespace: 639765cd-e871-448f-b465-3c62bebfbd08
        # 该配置必须放在 bootstrap.properties 文件中。
        # 在没有明确指定 ${spring.cloud.nacos.config.group} 配置的情况下， 默认使用的是 DEFAULT_GROUP 。
        # group: DEVELOP_GROUP
        # 扩展配置
        # 扩展配置，下面是一个完整的配置案例。
        # 通过 spring.cloud.nacos.config.extension-configs[n].data-id 的配置方式来支持多个 Data Id 的配置。
        # 通过 spring.cloud.nacos.config.extension-configs[n].group 的配置方式自定义 Data Id 所在的组，不明确配置的话，默认是 DEFAULT_GROUP。
        # 通过 spring.cloud.nacos.config.extension-configs[n].refresh 的配置方式来控制该 Data Id 在配置变更时，是否支持应用中可动态刷新，感知到最新的配置值。默认是不支持的。
        # 多个 Data Id 同时配置时，他的优先级关系是 spring.cloud.nacos.config.ext-config[n].data-id 其中 n 的值越大，优先级越高。
        # spring.cloud.nacos.config.ext-config[n].data-id 的值必须带文件扩展名，文件扩展名既可支持 properties，又可以支持 yaml/yml。
        # 此时 spring.cloud.nacos.config.file-extension 的配置对自定义扩展配置的 Data Id 文件扩展名没有影响。
        # extension-configs:
        #   - data-id: mail-service.yaml
        #     refresh: true
          # 1、Data Id 在默认的组 DEFAULT_GROUP,不支持配置的动态刷新
          # - data-id: ext-config-common01.properties
          # 2、Data Id 不在默认的组，不支持动态刷新
          # - data-id: ext-config-common02.properties
          #   group: GLOBAL_GROUP
          # 3、Data Id 既不在默认的组，也支持动态刷新
          # - data-id: ext-config-common03.properties
          #   group: REFRESH_GROUP
          #   refresh: true
        # 共享配置
        # 为了更加清晰的在多个应用间配置共享的 Data Id ，你可以通过以下的方式来配置。
        # 通过 spring.cloud.nacos.config.shared-configs[n].data-id 来支持多个共享 Data Id 的配置。
        # 通过 spring.cloud.nacos.config.shared-configs[n].refresh 来支持哪些共享配置的 Data Id 在配置变化时，应用中是否可动态刷新，感知到最新的配置值。
        # 如果没有明确配置，默认情况下所有共享配置的 Data Id 都不支持动态刷新。
        # [可能不对] 通过 spring.cloud.nacos.config.shared-configs[n] 来支持多个共享配置的 Data Id 时，多个共享配置间的一个优先级的关系我们约定：按照配置出现的先后顺序，即后面的优先级要高于前面。
        # 通过 spring.cloud.nacos.config.shared-configs[n] 来配置时，Data Id 必须带文件扩展名，文件扩展名既可支持 properties，也可以支持 yaml/yml。
        # 此时 spring.cloud.nacos.config.file-extension 的配置对自定义扩展配置的 Data Id 文件扩展名没有影响。
        shared-configs:
          - data-id: commons-cloud.yaml
            group: COMMON_GROUP
            refresh: true
          # 1、Data Id 在默认的组 DEFAULT_GROUP,不支持配置的动态刷新
          # - data-id: all-common.properties
          # 2、Data Id 在默认的组 DEFAULT_GROUP，支持动态刷新
          # - data-id: bootstrap-common.properties
          #   refresh: true
